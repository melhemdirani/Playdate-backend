import { describe, it, expect, beforeAll, afterAll } from 'vitest';
import axios from 'axios';
import { registerAndLoginUser } from './test-utils';
import fs from 'fs';
import path from 'path';
import FormData from 'form-data';

const API_BASE_URL = 'http://localhost:4000';
const IMAGE_API_BASE_URL = `${API_BASE_URL}/images`;

describe.skip('Image Endpoints', () => {
  let userToken: string;
  let uploadedPublicId: string;
  let uploadedFileName: string;

  beforeAll(async () => {
    // Ensure the server is running
    try {
      await axios.get(API_BASE_URL);
    } catch (error) {
      console.error('API is not reachable. Please ensure your server is running on port 4000.');
      process.exit(1);
    }

    // Register and login a user for testing
    const { token } = await registerAndLoginUser();
    userToken = token;
  });

  it('should upload a single image', async () => {
    const filePath = path.join(__dirname, 'dummy.txt');
    fs.writeFileSync(filePath, 'This is a dummy file for testing image upload.');

    const form = new FormData();
    form.append('file', fs.createReadStream(filePath), {
      filename: 'dummy.txt',
      contentType: 'text/plain',
    });

    const response = await axios.post(`${IMAGE_API_BASE_URL}/upload`, form, {
      headers: {
        ...form.getHeaders(),
        Authorization: `Bearer ${userToken}`,
      },
    });

    expect(response.status).toBe(200);
    expect(response.data).toBeDefined();
    expect(response.data.url).toBeDefined();
    expect(response.data.publicId).toBeDefined();
    uploadedPublicId = response.data.publicId;
    uploadedFileName = path.basename(response.data.url);

    fs.unlinkSync(filePath); // Clean up dummy file
  });

  it('should delete an uploaded image', async () => {
    // The publicId generated by the server is not directly the filename.
    // The delete endpoint expects the publicId, but the server-side deletion logic
    // uses the publicId as part of the filename. This needs to be consistent.
    // For now, I'll assume the publicId is part of the filename for deletion.
    // In a real scenario, you'd likely store the publicId and filename mapping in a DB.

    // To make this test pass, we need to ensure the file actually exists in the uploads directory
    // with a name that can be derived from the publicId.
    // For this test, I'll create a dummy file in the uploads directory with the expected name.
    const uploadsDir = path.join(__dirname, '../../uploads');
    const dummyFilePathInUploads = path.join(uploadsDir, uploadedFileName);
    fs.writeFileSync(dummyFilePathInUploads, 'This is the file to be deleted.');

    const response = await axios.delete(`${IMAGE_API_BASE_URL}/delete/images/${uploadedPublicId}`, {
      headers: { Authorization: `Bearer ${userToken}` },
    });

    expect(response.status).toBe(200);
    expect(response.data.result).toBe('ok');
    // Verify the file is actually deleted
    expect(fs.existsSync(dummyFilePathInUploads)).toBe(false);
  });
});
